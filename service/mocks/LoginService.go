// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kavehjamshidi/fidibo-challenge/domain"
	mock "github.com/stretchr/testify/mock"
)

// LoginService is an autogenerated mock type for the LoginService type
type LoginService struct {
	mock.Mock
}

// Login provides a mock function with given fields: credentials
func (_m *LoginService) Login(credentials domain.LoginRequest) (domain.LoginResponse, error) {
	ret := _m.Called(credentials)

	var r0 domain.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.LoginRequest) (domain.LoginResponse, error)); ok {
		return rf(credentials)
	}
	if rf, ok := ret.Get(0).(func(domain.LoginRequest) domain.LoginResponse); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Get(0).(domain.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(domain.LoginRequest) error); ok {
		r1 = rf(credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLoginService interface {
	mock.TestingT
	Cleanup(func())
}

// NewLoginService creates a new instance of LoginService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoginService(t mockConstructorTestingTNewLoginService) *LoginService {
	mock := &LoginService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
