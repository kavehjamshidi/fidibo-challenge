// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kavehjamshidi/fidibo-challenge/domain"
	mock "github.com/stretchr/testify/mock"
)

// SearchService is an autogenerated mock type for the SearchService type
type SearchService struct {
	mock.Mock
}

// Search provides a mock function with given fields: ctx, query
func (_m *SearchService) Search(ctx context.Context, query string) (domain.SearchResult, error) {
	ret := _m.Called(ctx, query)

	var r0 domain.SearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.SearchResult, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.SearchResult); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(domain.SearchResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSearchService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSearchService creates a new instance of SearchService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSearchService(t mockConstructorTestingTNewSearchService) *SearchService {
	mock := &SearchService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
